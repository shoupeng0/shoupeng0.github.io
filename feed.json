{
    "version": "https://jsonfeed.org/version/1",
    "title": "以梦为马",
    "description": "首先森的个人博客",
    "home_page_url": "https://shoupeng0.github.io",
    "items": [
        {
            "id": "https://shoupeng0.github.io/2023/10/11/Middleware/",
            "url": "https://shoupeng0.github.io/2023/10/11/Middleware/",
            "title": "中间件介绍",
            "date_published": "2023-10-11T02:46:29.000Z",
            "content_html": "<h2 id=\"什么是中间件\"><a class=\"anchor\" href=\"#什么是中间件\">#</a> 什么是中间件</h2>\n<p>Middleware</p>\n<blockquote>\n<p>什么是中间件</p>\n</blockquote>\n<p>我国企业从 20 世纪 80 年代开始就逐渐进行信息化建设，由于方法和体系的不成熟，以及企业业务的市场需求的不断变化，一个企业可能同时运行着多个不同的业务系统，这些系统可能基于不同的操作系统、不同的数据库、异构的网络环境。现在的问题是，如何把这些信息系统结合成一个有机地协同工作的整体，真正实现企业跨平台、分布式应用。中间件便是解决之道，它用自己的复杂换取了企业应用的简单。</p>\n<p>中间件（Middleware）是处于操作系统和应用程序之间的软件，也有人认为它应该属于操作系统中的一部分。人们在使用中间件时，往往是一组中间件集成在一起，构成一个平台（包括开发平台和运行平台），但在这组中间件中必须要有一个通信中间件，即中间件 + 平台 + 通信，这个定义也限定了只有用于分布式系统中才能称为中间件，同时还可以把它与支撑软件和使用软件区分开来</p>\n<blockquote>\n<p>为什么需要使用消息中间件</p>\n</blockquote>\n<p>具体地说，中间件屏蔽了底层操作系统的复杂性，使程序开发人员面对一个简单而统一的开发环境，减少程序设计的复杂性，将注意力集中在自己的业务上，不必再为程序在不同系统软件上的移植而重复工作，从而大大减少了技术上的负担，中间件带给应用系统的，不只是开发的简便、开发周期的缩短，也减少了系统的维护、运行和管理的工作量，还减少了计算机总体费用的投入。</p>\n<blockquote>\n<p>中间件特点</p>\n</blockquote>\n<p>为解决分布异构问题，人们提出了中间件（middleware) 的概念。中间件时位于平台（硬件和操作系统）和应用之间的通用服务，如下图所示，这些服务具有标准的程序接口和协议。针对不同的操作系统和硬件平台，它们可以有符合接口的协议规范的多种实现。</p>\n<p>也很难给中间件一个严格的定义，但中间件应具有如下的一些特点：</p>\n<ol>\n<li>满足大量应用的需要</li>\n<li>运行于多种硬件和 OS 平台</li>\n<li>支持分布计算，提供跨网络、硬件和 OS 平台的透明性的应用或服务的交互</li>\n<li>支持标准的协议</li>\n<li>支持标准的接口</li>\n</ol>\n<p>由于标准接口对于可移植性和标准协议对于互操作性的重要性，中间件已成为许多标准化工作的主要部分。对于应用软件开发，中间件远比操作系统和网络服务更为重要，中间件提供的程序接口定义了一个相对稳定的高层应用环境，不管底层的计算机硬件和系统软件怎样更新换代，只要将中间件升级更新，并保持中间件对外的接口定义不变，应用软件几乎不需任何修改，从而保护了企业在应用软件开发和维护中的重大投资。</p>\n<p>简单说：中间件有个很大的特点，是脱离于具体设计目标，而具备提供普遍独立功能需求的模块。这使得中间件一定是可替换的。如果一个系统设计中，中间件是不可替代的，不是架构、框架设计有问题，那么就是这个中间件，在别处可能是个中间件，在这个系统内是引擎。</p>\n<blockquote>\n<p>在项目中什么时候使用中间件技术</p>\n</blockquote>\n<p>在项目的架构和重构中，使用任何技术和架构的改变我们都需要谨慎斟酌和思考，因为任何技术的融入和变化都可能人员，技术，和成本的增加，中间件的技术一般现在一些互联网公司或者项目中使用比较多，如果你仅仅还只是一个初创公司建议还是使用单体架构，最多加个缓存中间件即可，不要盲目追求新或者所谓的高性能，而追求的背后一定是业务的驱动和项目的驱动，因为一旦追求就意味着你的学习成本，公司的人员结构以及服务器成本，维护和运维的成本都会增加，所以需要谨慎选择和考虑。</p>\n<p>但是作为一个开放人员，一定要有学习中间件技术的能力和思维，否则很容易当项目发展到一个阶段在去掌握估计或者在面试中提及，就会给自己带来不小的困扰，在当今这个时代这些技术也并不是什么新鲜的东西，如果去掌握和挖掘最关键的还是自己花时间和经历去探讨和研究。</p>\n<h2 id=\"中间件技术及架构的概述\"><a class=\"anchor\" href=\"#中间件技术及架构的概述\">#</a> 中间件技术及架构的概述</h2>\n<p>&lt;iframe src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3RlLm9kZGZhci5jb20vbWFya21hcC8lRTYlQjYlODglRTYlODElQUYlRTQlQjglQUQlRTklOTclQjQlRTQlQkIlQjYuaHRtbA==\">https://note.oddfar.com/markmap/ 消息中间件.html</span>&quot; width=&quot;100%&quot; height=&quot;800&quot; frameborder=&quot;0&quot; scrolling=&quot;No&quot; leftmargin=&quot;0&quot; topmargin=&quot;0&quot; style=&quot;color: rgb(0, 50, 60); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/iframe&gt;</p>\n<blockquote>\n<p>单体架构</p>\n</blockquote>\n<p><img data-src=\"https://testingcf.jsdelivr.net/gh/oddfar/static/img/RabbitMQ/image-20210625223559218.png\" alt=\"image-20210625223559218\" /></p>\n<p>在企业开发当中，大部分的初期架构都采用的是单体架构的模式进行架构，而这种架构的典型的特点：就是把所有的业务和模块，源代码，静态资源文件等都放在一个工程中，如果其中的一个模块升级或者迭代发生一个很小的变动都会重新编译和重新部署项目。这种存在的问题是：</p>\n<ol>\n<li>耦合度太高</li>\n<li>不易维护</li>\n<li>服务器的成本高</li>\n<li>以及升级架构的复杂度也会增大</li>\n</ol>\n<p>这样就有后续的分布式架构系统。如下</p>\n<p><img data-src=\"https://testingcf.jsdelivr.net/gh/oddfar/static/img/RabbitMQ/image-20210625223659487.png\" alt=\"image-20210625223659487\" /></p>\n<p>分布式系统：通俗一点，就是一个请求由服务器端的多个服务（服务或者系统）协同处理完成</p>\n<p>和单体架构不同的是，单体架构是一个请求发起 jvm 调度线程（确切的是 tomcat 线程池）分配线程 Thread 来处理请求直到释放，而分布式系统是：一个请求时由多个系统共同来协同完成，jvm 和环境都可能是独立。如果生活中的比喻的话，单体架构就像建设一个小房子很快就能够搞定，如果你要建设一个鸟巢或者大型的建筑，你就必须是各个环节的协同和分布，这样目的也是项目发展到后期的时候要去部署和思考的问题。我们也不难看出来：分布式架构系统存在的特点和问题如下：</p>\n<p><strong>存在问题：</strong></p>\n<ol>\n<li>学习成本高，技术栈过多</li>\n<li>运维成本和服务器成本增高</li>\n<li>人员的成本也会增高</li>\n<li>项目的负载度也会上升</li>\n<li>面临的错误和容错性也会成倍增加</li>\n<li>占用的服务器端口和通讯的选择的成本高</li>\n<li>安全性的考虑和因素逼迫可能选择 RMI/MQ 相关的服务器端通讯</li>\n</ol>\n<p><strong>好处：</strong></p>\n<ol>\n<li>\n<p>服务系统的独立，占用的服务器资源减少和占用的硬件成本减少</p>\n<p>确切的说是：可以合理的分配服务资源，不造成服务器资源的浪费</p>\n</li>\n<li>\n<p>系统的独立维护和部署，耦合度降低，可插拔性</p>\n</li>\n<li>\n<p>系统的架构和技术栈的选择可以变的灵活（而不是单纯地选择 java）</p>\n</li>\n<li>\n<p>弹性的部署，不会造成平台因部署造成的瘫痪和停服的状态</p>\n</li>\n</ol>\n<h2 id=\"基于消息中间件的分布式系统的架构\"><a class=\"anchor\" href=\"#基于消息中间件的分布式系统的架构\">#</a> 基于消息中间件的分布式系统的架构</h2>\n<p><img data-src=\"https://testingcf.jsdelivr.net/gh/oddfar/static/img/RabbitMQ/image-20210625224024821.png\" alt=\"image-20210625224024821\" /></p>\n<p>从上图中可以看出来，消息中间件的是</p>\n<ol>\n<li>利用可靠的消息传递机制进行系统和系统直接的通讯</li>\n<li>通过提供消息传递和消息的派对机制，它可以在分布式系统环境下扩展进程间的通讯</li>\n</ol>\n<blockquote>\n<p>消息中间件应用的场景</p>\n</blockquote>\n<ol>\n<li>跨系统数据传递</li>\n<li>高并发的流量削峰</li>\n<li>数据的并发和异步处理</li>\n<li>大数据分析与传递</li>\n<li>分布式事务</li>\n</ol>\n<p>比如你有一个数据要进行迁移或者请求并发过多的时候，比如你有 10W 的并发请求下订单，我们可以在这些订单入库之前，我们可以把订单请求堆积到消息队列中，让它稳健可靠的入库和执行</p>\n",
            "tags": [
                "MQ",
                "Middleware"
            ]
        },
        {
            "id": "https://shoupeng0.github.io/2023/10/08/docker-compose/",
            "url": "https://shoupeng0.github.io/2023/10/08/docker-compose/",
            "title": "Docker Compose 容器编排",
            "date_published": "2023-10-08T11:21:34.000Z",
            "content_html": "<h2 id=\"docker-compose-容器编排\"><a class=\"anchor\" href=\"#docker-compose-容器编排\">#</a> Docker Compose 容器编排</h2>\n<h3 id=\"docker-compose是什么能干嘛\"><a class=\"anchor\" href=\"#docker-compose是什么能干嘛\">#</a> Docker Compose 是什么，能干嘛</h3>\n<p>Docker-Compose 是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。</p>\n<p>Compose 是 Docker 公司推出的一一个工具软件，可以管理多个 Docker 容器组成一个应用。你需要定义一个 YAML 格式的配置文件 docker-</p>\n<p>compose.yml, <mark>写好多个容器之间的调用关系</mark>。然后，只要一个命令，就能同时启动关闭这些容器</p>\n<p>docker 建议我们每一个容器中只运行一个服务，因为 docker 容器本身占用资源极少，所以最好是将每个服务单独的分割开来但是这样我们又</p>\n<p>面临了一个问题？</p>\n<p>如果我需要同时部署好多个服务，难道要每个服务单独写 Dockerfile 然后在构建镜像，构建容器，这样累都累死了，所以 docker 官方给我们提供了 docker-compose 多服务部署的工具</p>\n<p>例如要实现一个 Web 微服务项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库 mysq | 服务容器，redis 服务器，注册中心</p>\n<p>eureka，甚至还包括负载均衡容器等等。。。。。。</p>\n<p>Compose 允许用户通过一个单独的 docker-compose.yml 模板文件 (YAML 格式) 来定义一组相关联的应用容器为一个项目 (project) 。</p>\n<p>可以很容易地用一个配置文件定义一个多容器的应用，然后使用 -. 条指令安装这个应用的所有依赖，完成构建。Docker-Compose 解决了容器与容器之间如何管理编排的问题。</p>\n<h3 id=\"docker-compose下载\"><a class=\"anchor\" href=\"#docker-compose下载\">#</a> Docker Compose 下载</h3>\n<p>官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9pbnN0YWxsL2xpbnV4LyNpbnN0YWxsLXRoZS1wbHVnaW4tbWFudWFsbHk=\">Install the Compose plugin | Docker Docs</span></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">DOCKER_CONFIG</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;DOCKER_CONFIG<span class=\"token operator\">:-</span>$HOME<span class=\"token operator\">/</span>.docker&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token variable\">$DOCKER_CONFIG</span>/cli-plugins</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-SL</span> https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-linux-x86_64 <span class=\"token parameter variable\">-o</span> <span class=\"token variable\">$DOCKER_CONFIG</span>/cli-plugins/docker-compose</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">chmod</span> +x <span class=\"token variable\">$DOCKER_CONFIG</span>/cli-plugins/docker-compose</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">docker</span> compose version</pre></td></tr></table></figure><p><img data-src=\"http://s19vhrdn9.hd-bkt.clouddn.com/image-20230927162628068.png\" alt=\"image-20230927162628068\" /></p>\n<h3 id=\"核心概念\"><a class=\"anchor\" href=\"#核心概念\">#</a> 核心概念</h3>\n<p>一文件 docker-compose. yml<br />\n 两要素</p>\n<p>服务 (service) 一个个应用容器实例，比如订单微服务、库存微服务、mysq | 容 器、nginx 容 器</p>\n<p>工程 (project) 由一组关联的应用容器组成的一个完整业务单元， 在 docker-compose.yml 文件中定义。</p>\n<p><img data-src=\"http://s19vhrdn9.hd-bkt.clouddn.com/image-20230927163054932.png\" alt=\"image-20230927163054932\" /></p>\n<h3 id=\"compose-使用的三个步骤\"><a class=\"anchor\" href=\"#compose-使用的三个步骤\">#</a> compose 使用的三个步骤</h3>\n<p>1. 编写 Dockerfile 定义各个微服务应用并构建出对应的镜像文件</p>\n<p>2. 使用 docker-compose.yml 定义一个完整业务单元，安排好整体应用中的各个容器服务<br />\n 3. 最后，执行 docker-compose up 命令来启动并运行整个应用程序，完成一键部署上线</p>\n<h3 id=\"compose常用命令\"><a class=\"anchor\" href=\"#compose常用命令\">#</a> compose 常用命令</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker-compose</span> <span class=\"token parameter variable\">-h</span> <span class=\"token comment\">#查看帮助</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker-compose</span> u <span class=\"token comment\">#启动所有 docker-compose 服务</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span> <span class=\"token comment\">#启动所有 docker-compose 服务并后台运行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker-compose</span> down <span class=\"token comment\">#停止并删除容器、网络、卷、镜像。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker-compose</span> <span class=\"token builtin class-name\">exec</span> yml里面的服务id <span class=\"token comment\">#进入容器实例内部 docker-compose exec docker-compose.yml 文件中写的服务 id /bin/bash </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">docker-compose</span> <span class=\"token function\">ps</span> <span class=\"token comment\">#展示当前 docker-compose 编排过的运行的所有容器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">docker-compose</span> <span class=\"token function\">top</span> <span class=\"token comment\">#展示当前 docker-compose 编排过的容器进程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">docker-compose</span> logs yml 里面的服务id <span class=\"token comment\">#查看容器输出日志</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>dokcer-compose config <span class=\"token comment\">#检查配置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>dokcer-compose config-q <span class=\"token comment\">#检查配置，有问题才有输出</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">docker-compose</span> restart <span class=\"token comment\">#重启服务</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">docker-compose</span> start <span class=\"token comment\">#启动服务</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">docker-compose</span> stop <span class=\"token comment\">#停止服务</span></pre></td></tr></table></figure><h3 id=\"使用compose编排服务\"><a class=\"anchor\" href=\"#使用compose编排服务\">#</a> 使用 compose 编排服务</h3>\n<blockquote>\n<p>没有使用 compose 之前：</p>\n</blockquote>\n<p>先后顺序要求固定，先 mysql+redis 才能微服务访问成功</p>\n<p>多个 run 命令<br />\n......<br />\n 容器间的启停或宕机，有可能导致 IP 地址对应的容器实例变化，映射出错，要么生产 IP 写死 (可以但是不推荐)，要么通过服务调用</p>\n<blockquote>\n<p>docker-compose.yml</p>\n</blockquote>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">microService</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">:</span><span class=\"token number\">1.6</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> ms01</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token punctuation\">-</span> <span class=\"token string\">\"6001:6001\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token punctuation\">-</span> /app/microService<span class=\"token punctuation\">:</span>/data</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token punctuation\">-</span> atguigu_net</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token punctuation\">-</span> redis</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token punctuation\">-</span> mysql</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"redis:6.0.10\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token string\">\"6379:6379\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">-</span> /app/redis/redis.conf<span class=\"token punctuation\">:</span>/etc/redis/redis.conf</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">-</span> /app/redis/data<span class=\"token punctuation\">:</span>/data</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">-</span> atguigu_net</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">-</span>server /etc/redis/redis.conf</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token key atrule\">mysql</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span><span class=\"token number\">5.7</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'123456'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token key atrule\">MYSQL_ALLOW_EMPTY_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'no'</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token key atrule\">MYSQL_DATABASE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'test'</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token key atrule\">MYSQL_USER</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token key atrule\">MYSQL_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'123456'</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3306:3306\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">-</span> /app/mysql/db<span class=\"token punctuation\">:</span>/var/lib/mysql</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">-</span> /app/mysq1/conf/my.cnf<span class=\"token punctuation\">:</span>/etc/my.cnf</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">-</span> /app/mysql/init<span class=\"token punctuation\">:</span>/docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.d</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">-</span> atguigu_net</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>default<span class=\"token punctuation\">-</span>authentication<span class=\"token punctuation\">-</span>plugin=<span class=\"token punctuation\">-</span>mysql_native_password <span class=\"token comment\">#解决外部无法访问</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#创建自定义网络</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token key atrule\">atguigu_net</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\"># Use a custom driver</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token key atrule\">driver</span><span class=\"token punctuation\">:</span> redis</pre></td></tr></table></figure><blockquote>\n<p>启动</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> compose up <span class=\"token comment\">#前台启动</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> compose up <span class=\"token parameter variable\">-d</span> <span class=\"token comment\">#后台启动</span></pre></td></tr></table></figure>",
            "tags": [
                "Docker",
                "Compose"
            ]
        }
    ]
}